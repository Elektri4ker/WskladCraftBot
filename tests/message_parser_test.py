# -*- coding: utf-8 -*-
import sys
sys.path.append("..")

from datetime import datetime

import unittest
from craft_bot.message_parser import MessageParser
from craft_bot.config import Config

class StockParserTest(unittest.TestCase):
    def setUp(self):
        self.validtext = ("–†–µ—Å—É—Ä—Å—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (451/4400):\n"
                            "/s_101 –ù–∏—Ç–∫–∏ (106) x 2\n"
                            "/s_111 –ê–ª—é–º.—Ä—É–¥–∞ (26) x 15\n")

        self.validtextadvanced = ("/s_134 üóÉ–°—É–Ω–¥—É—á–æ–∫ (4) x 1üí∞\n"
                                  "/s_109 –ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å (8) x 4üí∞")

        self.invalidtext = ("sdqqwasdad\n"
        "sdfwe")

        self.validtextsimple = ("–ù–∏—Ç–∫–∏ (106)\n"
                                "–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è —Ä—É–¥–∞ (26)\n")
        self.validtextadvancedsimple = ("üóÉ–°—É–Ω–¥—É—á–æ–∫ (4)\n"
                                        "–ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å (8)")

        self.message_parser = MessageParser()

    def test_parseSimpleMessage_validtext(self):
        #act
        found_resources = self.message_parser.parseSimpleMessage(self.validtextsimple)

        #assert
        self.assertEqual(found_resources['–ù–∏—Ç–∫–∏']['count'], 106)
        self.assertEqual(found_resources['–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è —Ä—É–¥–∞']['count'], 26)

    def test_parseSimpleMessage_validtextadvanced(self):
        #act
        found_resources = self.message_parser.parseSimpleMessage(self.validtextadvancedsimple)

        #assert
        self.assertEqual(found_resources['üóÉ–°—É–Ω–¥—É—á–æ–∫']['count'], 4)
        self.assertEqual(found_resources['–ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å']['count'], 8)

    def test_parseSimpleMessage_invalidtext(self):
        #act
        found_resources = self.message_parser.parseMessageFromDwarfs(self.invalidtext)
        #assert
        self.assertEqual(len(found_resources), 0)

    def test_parseMessageFromDwarfs_validtext(self):
        #act
        found_resources = self.message_parser.parseMessageFromDwarfs(self.validtext)

        #assert
        self.assertEqual(found_resources['–ù–∏—Ç–∫–∏']['count'], 106)
        self.assertEqual(found_resources['–ù–∏—Ç–∫–∏']['cost'], 2)

        self.assertEqual(found_resources[Config.abbreviation_mapping['–ê–ª—é–º.—Ä—É–¥–∞']]['count'], 26)
        self.assertEqual(found_resources[Config.abbreviation_mapping['–ê–ª—é–º.—Ä—É–¥–∞']]['cost'], 15)

    def test_parseMessageFromDwarfs_validtextadvanced(self):
        #act
        found_resources = self.message_parser.parseMessageFromDwarfs(self.validtextadvanced)

        #assert
        self.assertEqual(found_resources['üóÉ–°—É–Ω–¥—É—á–æ–∫']['count'], 4)
        self.assertEqual(found_resources['üóÉ–°—É–Ω–¥—É—á–æ–∫']['cost'], 1)

        self.assertEqual(found_resources['–ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å']['count'], 8)
        self.assertEqual(found_resources['–ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å']['cost'], 4)

    def test_parseMessageFromDwarfs_invalidtext(self):
        #act
        found_resources = self.message_parser.parseMessageFromDwarfs(self.invalidtext)
        #assert
        self.assertEqual(len(found_resources), 0)

    def test_parseQuestMessage(self):
        msg =   ("–î–æ —Ç–µ–±—è –¥–æ–Ω—ë—Å—Å—è –¥–µ—Ç—Å–∫–∏–π –ø–ª–∞—á. –ü–æ–π–¥—è –Ω–∞ –∑–≤—É–∫, —Ç—ã –∑–∞–º–µ—Ç–∏–ª –ø–∞—Ä—É –∑–∞–±–ª—É–¥–∏–≤—à–∏—Ö—Å—è –¥–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–≤–µ—Å—Ç–∏ –∏—Ö –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º.\n"
                "\n"
                "–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª: 86 –æ–ø—ã—Ç–∞ –∏ 1 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç.\n"
                "–ü–æ–ª—É—á–µ–Ω–æ: –ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å (1)\n"
                "–ü–æ–ª—É—á–µ–Ω–æ: –ü–æ—Ä–æ—à–æ–∫ (1)\n"
                "–ü–æ–ª—É—á–µ–Ω–æ: –í–µ—Ç–∫–∏ (1)\n")

        self.message_parser.parseQuestMessage(msg, datetime.now)


if __name__ == '__main__':
    unittest.main()
