# -*- coding: utf-8 -*-

import unittest
from stock_parser import StockParser
from config import Config

class StockParserTest(unittest.TestCase):
    def setUp(self):
        self.validtext = ("–†–µ—Å—É—Ä—Å—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (451/4400):\n"
                            "/s_101 –ù–∏—Ç–∫–∏ (106) x 2\n"
                            "/s_111 –ê–ª—é–º.—Ä—É–¥–∞ (26) x 15\n")

        self.validtextadvanced = ("/s_134 üóÉ–°—É–Ω–¥—É—á–æ–∫ (4) x 1üí∞\n"
                                  "/s_109 –ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å (8) x 4üí∞")

        self.invalidtext = ("sdqqwasdad\n"
        "sdfwe")

        self.validtextsimple = ("–ù–∏—Ç–∫–∏ (106)\n"
                                "–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è —Ä—É–¥–∞ (26)\n")
        self.validtextadvancedsimple = ("üóÉ–°—É–Ω–¥—É—á–æ–∫ (4)\n"
                                        "–ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å (8)")

        self.stock_parser = StockParser()

    def test_parseSimpleMessage_validtext(self):
        #act
        found_resources = self.stock_parser.parseSimpleMessage(self.validtextsimple)

        #assert
        self.assertEqual(found_resources[0]['name'], '–ù–∏—Ç–∫–∏')
        self.assertEqual(found_resources[0]['count'], 106)

        self.assertEqual(found_resources[1]['name'], '–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è —Ä—É–¥–∞')
        self.assertEqual(found_resources[1]['count'], 26)

    def test_parseSimpleMessage_validtextadvanced(self):
        #act
        found_resources = self.stock_parser.parseSimpleMessage(self.validtextadvancedsimple)

        #assert
        self.assertEqual(found_resources[0]['name'], 'üóÉ–°—É–Ω–¥—É—á–æ–∫')
        self.assertEqual(found_resources[0]['count'], 4)

        self.assertEqual(found_resources[1]['name'], '–ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å')
        self.assertEqual(found_resources[1]['count'], 8)

    def test_parseSimpleMessage_invalidtext(self):
        #act
        found_resources = self.stock_parser.parseMessageFromDwarfs(self.invalidtext)
        #assert
        self.assertEqual(len(found_resources), 0)

    def test_parseMessageFromDwarfs_validtext(self):
        #act
        found_resources = self.stock_parser.parseMessageFromDwarfs(self.validtext)

        #assert
        self.assertEqual(found_resources[0]['name'], '–ù–∏—Ç–∫–∏')
        self.assertEqual(found_resources[0]['count'], 106)
        self.assertEqual(found_resources[0]['cost'], 2)

        self.assertEqual(found_resources[1]['name'], Config.abbreviation_mapping['–ê–ª—é–º.—Ä—É–¥–∞'])
        self.assertEqual(found_resources[1]['count'], 26)
        self.assertEqual(found_resources[1]['cost'], 15)

    def test_parseMessageFromDwarfs_validtextadvanced(self):
        #act
        found_resources = self.stock_parser.parseMessageFromDwarfs(self.validtextadvanced)

        #assert
        self.assertEqual(found_resources[0]['name'], 'üóÉ–°—É–Ω–¥—É—á–æ–∫')
        self.assertEqual(found_resources[0]['count'], 4)
        self.assertEqual(found_resources[0]['cost'], 1)

        self.assertEqual(found_resources[1]['name'], '–ü–ª–æ—Ç–Ω–∞—è —Ç–∫–∞–Ω—å')
        self.assertEqual(found_resources[1]['count'], 8)
        self.assertEqual(found_resources[1]['cost'], 4)

    def test_parseMessageFromDwarfs_invalidtext(self):
        #act
        found_resources = self.stock_parser.parseMessageFromDwarfs(self.invalidtext)
        #assert
        self.assertEqual(len(found_resources), 0)

if __name__ == '__main__':
    unittest.main()
